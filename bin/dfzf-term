#!/usr/bin/env bash
set -euo pipefail

# Default configuration
term_dir_regex='s/.*\[([^]]+)\].*|^(.+) - NVIM$|(.+) \/..$/\1\2\3/p'
[ -f "$HOME/.config/dfzf/dfzf.conf" ] && source "$HOME/.config/dfzf/dfzf.conf"

# dfzf-term - Terminal management script
# Usage: dfzf-term {kill|new|toggle|scratchpad} [terminal_command]

show_usage() {
	echo "Usage: dfzf-term {kill|new|toggle|scratchpad} [terminal_command]"
	echo "  kill       - Kill dfzf-hidden terminal and reorganize windows"
	echo "  new        - Create new terminal from root container (requires terminal_command)"
	echo "  toggle     - Toggle fullscreen/split layout for terminal (requires terminal_command)"
	echo "  scratchpad - Manage dfzf-scratchpad terminal (requires terminal_command)"
	echo "  terminal_command - Terminal command to run (e.g., 'kitty -1', 'alacritty')"
	exit 1
}

term_kill() {
	windows_json=$(dfzf-exec -t get_tree | jq -c '
      [recurse(.nodes[] | select(.nodes)) 
       | select(any(.nodes[]; .focused == true))][0]
      | [recurse(.nodes[])]
      | map(select((.app_id // .window_properties.class) != null))
      | map({app_id: (.app_id // .window_properties.class), id})
    ')

	hidden_id=$(echo "$windows_json" | jq -r '.[] | select(.app_id == "dfzf-hidden").id')
	parent_id=$(echo "$windows_json" | jq -r '.[] | select(.app_id == null).id')
	jet_id=$(echo "$windows_json" | jq -r '.[] | select(.app_id != "dfzf-hidden").id')

	if [[ -n $hidden_id ]]; then
		dfzf-windows-kill "$hidden_id"
		# this one for the jetbrain window to loose its container. we have to wait until the hidden is killed
		dfzf-exec -q "[con_id=$jet_id] move to workspace 2"
		layout=$(dfzf-focus focus)
		dfzf-exec -q "[con_id=$jet_id] move to workspace 1, focus"
		if [[ $layout != "tabbed" ]]; then
			dfzf-exec -q "move left"
		fi
	fi
}

term_new() {
	local term_cmd="${@:2}"
	# identify and focus first window in current workspace, then exec terminal
	layout=$(dfzf-focus focus)

	dfzf-exec -q exec "$term_cmd"

	if [[ $layout != "tabbed" ]]; then
		sleep 0.1
		dfzf-exec -q "move left"
	fi
}

resize_scratchpad() {
	local percentage="${1:-90}"
	# Detect sway vs i3 and use appropriate selector
	if [ -n "${SWAYSOCK:-}" ]; then
		local selector='app_id="dfzf-scratchpad"'
	elif [ -n "${I3SOCK:-}" ]; then
		local selector='class="dfzf-scratchpad"'
	else
		echo "No running instance of Sway or i3 detected."
		return 1
	fi

	# Get screen dimensions and resize to specified percentage of screen, centered
	screen_size=$(dfzf-exec -t get_outputs | jq -r '.[] | select(.focused == true) | "\(.rect.width) \(.rect.height)"')
	read -r width height <<<"$screen_size"
	width_resized=$((width * percentage / 100))
	height_resized=$((height * percentage / 100))
	pos_x=$(((width - width_resized) / 2))
	pos_y=$(((height - height_resized) / 2))

	dfzf-exec -q "[$selector] resize set ${width_resized}px ${height_resized}px"
	dfzf-exec -q "[$selector] move position ${pos_x} ${pos_y}"
}

term_scratchpad() {
	local term_cmd="${@:2}"

	# Detect sway vs i3 and use appropriate selector
	if [ -n "${SWAYSOCK:-}" ]; then
		local selector='app_id="dfzf-scratchpad"'
		local create_args="--app-id dfzf-scratchpad"
	elif [ -n "${I3SOCK:-}" ]; then
		local selector='class="dfzf-scratchpad"'
		local create_args="--class dfzf-scratchpad"
	else
		echo "No running instance of Sway or i3 detected."
		return 1
	fi

	# Check if dfzf-scratchpad window exists and get its workspace
	workspace=$(dfzf-exec -t get_tree | jq -r '
		.nodes[] | .nodes[] | select(.type == "workspace") | 
		select([.. | objects | select((.app_id // .window_properties.class) == "dfzf-scratchpad")] | length > 0) | .name
	' | head -1)

	if [[ -z $workspace ]]; then
		# No dfzf-scratchpad window exists, create new one directly in scratchpad
		dfzf-exec -q "exec $term_cmd $create_args"
		sleep 0.2
		dfzf-exec -q "[$selector] move scratchpad, scratchpad show"
		resize_scratchpad 90
		return
	fi

	# Window exists, check workspace
	if [[ $workspace == "__i3_scratch" ]]; then
		# Window is in scratchpad, show it
		dfzf-exec -q "[$selector] scratchpad show"
		resize_scratchpad 90
	else
		# Window is visible, move it to scratchpad
		dfzf-exec -q "[$selector] move scratchpad"
	fi
}

term_toggle() {
	container_json=$(dfzf-exec -t get_tree | jq -c '
      [recurse(.nodes[] | select(.nodes)) 
       | select(any(.nodes[]; .focused == true))][0]
    ')
	container_type=$(echo "$container_json" | jq -r '.type')
	windows_json=$(echo "$container_json" | jq -c '
      [recurse(.nodes[])]
      | map({app_id: (.app_id // .window_properties.class), name, focused, layout})
    ')

	focused_app=$(echo "$windows_json" | jq -r '.[] | select(.focused).app_id')
	focused_name=$(echo "$windows_json" | jq -r '.[] | select(.focused).name')
	window_count=$(echo "$windows_json" | jq 'length')

	# Decision logic
	if [ "$window_count" -ge 3 ] && [ "$container_type" = "con" ]; then
		has_dfzf_hidden=$(echo "$windows_json" | jq -r 'any(.[]; .name != null and (.focused | not) and .app_id == "dfzf-hidden")')
		layout=$(echo "$windows_json" | jq -r '.[] | select(.name == null).layout')
		if [[ $focused_app == "dfzf-hidden" ]]; then
			if [[ $layout == "splitv" ]]; then
				dfzf-exec -q 'focus prev, layout stacking'
				exit
			fi
			dfzf-exec -q 'focus next, layout splitv'
			exit
		elif [[ $has_dfzf_hidden == "true" ]]; then
			dfzf-exec -q 'layout splitv, focus next'
			exit
		fi
	fi

	# Extract directory with configurable regex, fallback to ~
	dir=$(echo "$focused_name" | sed -n -E "$term_dir_regex")
	dir="${dir:-~}"

	local term_cmd="${@:2}"
	dir="${dir/#\~/$HOME}"
	dfzf-exec -q "split v"
	$term_cmd --app-id "dfzf-hidden" -d "$dir"
}

# Main script logic
case "${1:-}" in
kill)
	term_kill "$@"
	;;
new)
	term_new "$@"
	;;
toggle)
	term_toggle "$@"
	;;
scratchpad)
	term_scratchpad "$@"
	;;
*)
	show_usage
	;;
esac
