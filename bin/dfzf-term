#!/usr/bin/env bash
set -euo pipefail

# Default configuration
term_dir_regex='s/.*\[([^]]+)\].*|^(.+) - NVIM$|(.+) \/..$/\1\2\3/p'
[ -f "$HOME/.config/dfzf/dfzf.conf" ] && source "$HOME/.config/dfzf/dfzf.conf"

# dfzf-term - Terminal management script
# Usage: dfzf-term {kill|new|toggle|scratchpad} [terminal_command]

show_usage() {
	echo "Usage: dfzf-term {kill|new|toggle|scratchpad} [terminal_command]"
	echo "  kill       - Kill dfzf-hidden terminal and reorganize windows"
	echo "  new        - Create new terminal from root container (requires terminal_command)"
	echo "  toggle     - Toggle fullscreen/split layout for terminal (requires terminal_command)"
	echo "  scratchpad - Manage dfzf-scratchpad terminal (requires terminal_command)"
	echo "  terminal_command - Terminal command to run (e.g., 'kitty -1', 'alacritty')"
	exit 1
}

term_kill() {
	windows_json=$(dfzf-exec -t get_tree | jq -c '
      [recurse(.nodes[] | select(.nodes)) 
       | select(any(.nodes[]; .focused == true))][0]
      | [recurse(.nodes[])]
      | map(select((.app_id // .window_properties.class) != null))
      | map({app_id: (.app_id // .window_properties.class), id})
    ')

	hidden_id=$(echo "$windows_json" | jq -r '.[] | select(.app_id == "dfzf-hidden").id')
	parent_id=$(echo "$windows_json" | jq -r '.[] | select(.app_id == null).id')
	jet_id=$(echo "$windows_json" | jq -r '.[] | select(.app_id != "dfzf-hidden").id')

	if [[ -n $hidden_id ]]; then
		dfzf-windows-kill "$hidden_id"
		# this one for the jetbrain window to loose its container. we have to wait until the hidden is killed
		dfzf-exec -q "[con_id=$jet_id] move to workspace 2"
		layout=$(dfzf-focus focus)
		dfzf-exec -q "[con_id=$jet_id] move to workspace 1, focus"
		if [[ $layout != "tabbed" ]]; then
			dfzf-exec -q "move left"
		fi
	fi
}

term_new() {
	local term_cmd="${*:2}"
	# identify and focus first window in current workspace, then exec terminal
	layout=$(dfzf-focus focus)

	dfzf-exec -q exec "$term_cmd"

	if [[ $layout != "tabbed" ]]; then
		sleep 0.1
		dfzf-exec -q "move left"
	fi
}

term_scratchpad() {
	local term_cmd="${*:2}"

	# Detect sway vs i3 and use appropriate selector
	if [[ -n ${SWAYSOCK:-} ]]; then
		local selector='app_id="dfzf-scratchpad"'
		local create_args="--app-id dfzf-scratchpad"
	elif [[ -n ${I3SOCK:-} ]]; then
		local selector='class="dfzf-scratchpad"'
		local create_args="--class dfzf-scratchpad"
	else
		echo "No running instance of Sway or i3 detected."
		return 1
	fi

	# Check if dfzf-scratchpad window exists and get its workspace
	workspace=$(dfzf-exec -t get_tree | jq -r '
		[.. | objects | select(.type == "workspace")] | 
		map(select([.. | objects | select((.app_id // .window_properties.class) == "dfzf-scratchpad")] | length > 0)) | 
		.[0].name // empty
	')

	if [[ -z $workspace ]]; then
		# No dfzf-scratchpad window exists, create new one directly in scratchpad
		dfzf-exec -q "exec $term_cmd $create_args"
		sleep 0.2
		dfzf-exec -q "[$selector] move scratchpad, scratchpad show"
		dfzf-resize 90
		return
	fi

	# Window exists, check workspace
	if [[ $workspace == "__i3_scratch" ]]; then
		# Window is in scratchpad, show it
		dfzf-exec -q "[$selector] scratchpad show"
		dfzf-resize 90
	else
		# Window is visible, move it to scratchpad
		dfzf-exec -q "[$selector] move scratchpad"
	fi
}

term_toggle() {
	container_json=$(dfzf-exec -t get_tree | jq -c '
      [recurse(.nodes[] | select(.nodes)) 
       | select(any(.nodes[]; .focused == true))][0]
    ')

	windows_json=$(echo "$container_json" | jq -c '
      [.nodes[] | select(.type == "con")]
      | map({id, app_id: (.app_id // .window_properties.class), name, focused, layout})
    ')

	focused_app=$(echo "$windows_json" | jq -r '.[] | select(.focused).app_id')
	focused_name=$(echo "$windows_json" | jq -r '.[] | select(.focused).name')
	original_focused_id=$(echo "$windows_json" | jq -r '.[] | select(.focused).id')
	window_count=$(echo "$windows_json" | jq 'length')
	dfzf_hidden_count=$(echo "$windows_json" | jq -r '[.[] | select(.name != null and .app_id == "dfzf-hidden")] | length')

	# Get container layout for additional robustness check
	container_layout=$(echo "$container_json" | jq -r '.layout')

	# Decision logic: Handle both normal toggle (2 windows) and reorganization (3+ windows) when dfzf-hidden exists
	# Expected: container_type="con" AND layout in (splitv, stacked) AND exactly one dfzf-hidden window
	# Excluded: "workspace", "output" or containers with other layouts (tabbed, splith, etc) or wrong dfzf-hidden count
	if [[ $window_count -ge 2 && $container_layout =~ ^(splitv|stacked)$ && $dfzf_hidden_count -eq 1 ]]; then
		if [[ $window_count -ge 3 ]]; then
			# Keep the first application window as primary work context
			main_window_id=$(echo "$windows_json" | jq -r 'map(select(.app_id != "dfzf-hidden" and .app_id != null and .name != null)) | .[0].id')

			# Reorganize by moving additional windows to workspace root
			current_workspace=$(dfzf-exec -t get_workspaces | jq -r '.[] | select(.focused == true) | .name')

			# Identify windows to relocate (excluding terminal and primary application)
			windows_to_move=$(echo "$windows_json" | jq -r --arg main_id "$main_window_id" '
				.[] | 
				select(.app_id != "dfzf-hidden") | 
				select(.id != ($main_id | tonumber)) | 
				.id
			')

			if [[ -n $windows_to_move ]]; then
				# Stage windows for extraction by moving to temporary workspace
				echo "$windows_to_move" | while read -r window_id; do
					if [[ -n $window_id ]]; then
						dfzf-exec -q "[con_id=$window_id] move to workspace 2"
					fi
				done

				# Get layout before creating temporary terminal
				layout=$(dfzf-focus focus)

				# Create temporary terminal to facilitate container extraction
				current_focused=$(dfzf-exec -t get_tree | jq -r '.. | objects | select(.focused == true) | .id')
				dfzf-exec -q "exec ${TERMINAL_COMMAND:-kitty -1} --app-id dfzf-hidden sh -c 'sleep 10 && exit 0'"

				# Wait for temporary terminal to become active
				while true; do
					new_focused=$(dfzf-exec -t get_tree | jq -r '.. | objects | select(.focused == true) | .id')
					if [[ $new_focused != "$current_focused" ]]; then
						break
					fi
					sleep 0.05
				done

				# Extract windows from containers using layout manipulation (skip for tabbed layouts)
				if [[ $layout != "tabbed" ]]; then
					dfzf-exec -q "move left"
				fi

				# Return relocated windows to current workspace at root level
				echo "$windows_to_move" | while read -r window_id; do
					if [[ -n $window_id ]]; then
						dfzf-exec -q "[con_id=$window_id] move to workspace $current_workspace, focus"
					fi
				done
			fi

			# Return focus to originally focused window
			dfzf-exec -q "[con_id=$original_focused_id] focus"
		else
			# Standard toggle behavior for application and terminal pair
			layout=$container_layout
			if [[ $focused_app == "dfzf-hidden" ]]; then
				if [[ $layout == "splitv" ]]; then
					dfzf-exec -q 'focus prev, layout stacking'
				else
					dfzf-exec -q 'focus prev, layout splitv'
				fi
			else
				# Terminal exists but not focused, focus it
				dfzf-exec -q 'layout splitv, focus prev'
			fi
		fi
	else
		# Extract directory with configurable regex, fallback to ~
		dir=$(echo "$focused_name" | sed -n -E "$term_dir_regex")
		dir="${dir:-~}"

		local term_cmd="${*:2}"
		dir="${dir/#\~/$HOME}"
		dfzf-exec -q "split v"
		$term_cmd --app-id "dfzf-hidden" -d "$dir"
	fi
}

# Main script logic
case "${1:-}" in
kill)
	term_kill "$@"
	;;
new)
	term_new "$@"
	;;
toggle)
	term_toggle "$@"
	;;
scratchpad)
	term_scratchpad "$@"
	;;
*)
	show_usage
	;;
esac
