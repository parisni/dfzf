#!/usr/bin/env bash
set -euo pipefail

# dfzf-term - Terminal management script
# Usage: dfzf-term {kill|new|toggle}

show_usage() {
	echo "Usage: dfzf-term {kill|new|toggle}"
	echo "  kill   - Kill dfzf-hidden terminal and reorganize windows"
	echo "  new    - Create new terminal from root container"
	echo "  toggle - Toggle fullscreen/split layout for terminal"
	exit 1
}

term_kill() {
	windows_json=$(dfzf-exec -t get_tree | jq -c '
      [recurse(.nodes[] | select(.nodes)) 
       | select(any(.nodes[]; .focused == true))][0]
      | [recurse(.nodes[])]
      | map(select((.app_id // .window_properties.class) != null))
      | map({app_id: (.app_id // .window_properties.class), id})
    ')

	hidden_id=$(echo "$windows_json" | jq -r '.[] | select(.app_id == "dfzf-hidden").id')
	parent_id=$(echo "$windows_json" | jq -r '.[] | select(.app_id == null).id')
	jet_id=$(echo "$windows_json" | jq -r '.[] | select(.app_id != "dfzf-hidden").id')

	if [[ -n $hidden_id ]]; then
		dfzf-windows-kill "$hidden_id"
		# this one for the jetbrain window to loose its container. we have to wait until the hidden is killed
		dfzf-exec "[con_id=$jet_id] move to workspace 2"
		layout=$(dfzf-focus focus)
		dfzf-exec "[con_id=$jet_id] move to workspace 1, focus"
		if [[ $layout != "tabbed" ]]; then
			dfzf-exec "move left"
		fi
	fi
}

term_new() {
	# identify and focus first window in current workspace, then exec kitty
	layout=$(dfzf-focus focus)

	dfzf-exec exec "kitty -1"

	if [[ $layout != "tabbed" ]]; then
		sleep 0.1
		dfzf-exec "move left"
	fi
}

term_toggle() {
	windows_json=$(dfzf-exec -t get_tree | jq -c '
      [recurse(.nodes[] | select(.nodes)) 
       | select(any(.nodes[]; .focused == true))][0]
      | [recurse(.nodes[])]
      | map({app_id: (.app_id // .window_properties.class), name, focused, layout})
    ')

	focused_app=$(echo "$windows_json" | jq -r '.[] | select(.focused).app_id')
	focused_name=$(echo "$windows_json" | jq -r '.[] | select(.focused).name')
	window_count=$(echo "$windows_json" | jq 'length')

	# Decision logic
	if [ "$window_count" -eq 3 ]; then
		other_app=$(echo "$windows_json" | jq -r '.[] | select(.name != null) | select(.focused | not).app_id')
		other_app_name=$(echo "$windows_json" | jq -r '.[] | select(.name != null) | select(.focused | not).name')
		layout=$(echo "$windows_json" | jq -r '.[] | select(.name == null).layout')
		if [[ $focused_app == "dfzf-hidden" ]]; then
			if [[ $layout == "splitv" ]]; then
				dfzf-exec 'focus next, layout stacking'
				exit
			fi
			dfzf-exec 'focus next, layout splitv'
			exit
		elif [[ $other_app == "dfzf-hidden" ]]; then
			dfzf-exec 'layout splitv, focus next'
			exit
		fi
	fi

	# Extract directory with unified regex, fallback to ~
	dir=$(echo "$focused_name" | sed -n -E 's/.*\[([^]]+)\].*|^(.+) - NVIM$|(.+) \/..$/\1\2\3/p')
	dir="${dir:-~}"

	dir="${dir/#\~/$HOME}"
	dfzf-exec "split v"
	kitty -1 --app-id "dfzf-hidden" -d "$dir"
}

# Main script logic
case "${1:-}" in
kill)
	term_kill
	;;
new)
	term_new
	;;
toggle)
	term_toggle
	;;
*)
	show_usage
	;;
esac
