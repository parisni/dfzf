#!/usr/bin/env bash
set -euo pipefail

windows_app_id_map_json="{}"
windows_glyph_rules_json='[{"glyph": " "}]'
windows_title_rm_pattern="— Mozilla Firefox "
[ -f "$HOME/.config/dfzf/dfzf.conf" ] && source "$HOME/.config/dfzf/dfzf.conf"
findcommand=$(command -v fd || command -v fdfind) || {
	echo "Neither fd nor fdfind found"
	exit 1
}

# Parse command line options
input_json=""

while [[ $# -gt 0 ]]; do
	case $1 in
	--input-json)
		input_json="$2"
		shift 2
		;;
	*)
		shift
		;;
	esac
done

# Accept optional input via stdin or get tree if no input provided
if [ -z "$input_json" ]; then
	input_json="$(dfzf-exec -t get_tree --raw)"
fi

state_hidden_file="/tmp/dfzf-windows-show-hidden"
show_hidden=false
if [[ -f $state_hidden_file ]]; then
	show_hidden=true
fi

RESET=$'\033[0m'
RED=$'\033[31m'
BLUE=$'\033[34m'
GREEN=$'\033[32m'
color_state_file=$($findcommand 'dfzf-windows-color-.+' /tmp -d 1 -t f 2>/dev/null | head -n 1)
# Main processing logic using jq
result=$(
	echo "$input_json" | jq -r --arg red "$RED" --arg blue "$BLUE" --arg green "$GREEN" --arg reset "$RESET" \
		--argjson map "$windows_app_id_map_json" \
		--argjson glyph_rules "$windows_glyph_rules_json" \
		--argjson show_hidden "$show_hidden" '
  def format_title(text): "\u2063" + text + "\u2063";
    .. | objects
    | select(.type == "con" or .type == "floating_con")
    | select(.window_type == null or .window_type == "normal")
    | select(.name != null)
    | select((.app_id // .window_properties.class) != null)
    | select((.app_id // .window_properties.class) != "dfzf-popup")
    | select($show_hidden or ((.app_id // .window_properties.class) != "dfzf-hidden"))
    | select((.app_id // .window_properties.class) != "dfzf-scratchpad")
    | select((.app_id // .window_properties.class) != "dfzf-git")
    | . as $win
    | {
        id: .id,
        name: .name,
        sort: ([.marks[]? | select(startswith("_dfzf-sort"))] | first // "_dfzf-sort-0"),
        app_id: (
          (.app_id // .window_properties.class) as $app_id
          | ($map[$app_id] // $app_id)
        ),
        urgent: .urgent,
        red: (if any(.marks[]?; startswith("_dfzf-red-")) then "\($red) \($reset)" else "" end),
        blue: (if any(.marks[]?; startswith("_dfzf-blue-")) then "\($blue) \($reset)" else "" end),
        green: (if any(.marks[]?; startswith("_dfzf-green-")) then "\($green) \($reset)" else "" end),
        glyph: (
          ($glyph_rules
            | map(
                . as $rule |
                select(
                  ($rule.field == "app_id" and ($win.app_id // $win.window_properties.class // "" | test($rule.regex; "i"))) or
                  ($rule.field == "name"   and ($win.name // "" | test($rule.regex; "i"))) or
                  ($rule.field == null) # default glyph
                )
              )
            | first
            | .glyph
          )
        )
      }
      
    | "\(.sort)\(if .urgent then "\u001b[33m" else "" end)\(.glyph) [\(.app_id)]\(if .urgent then "\u001b[0m" else "" end)\t\(.red)\(.blue)\(.green) \(format_title(.name)) #\(.id)"
  ' | sort -nr |
		sed -E 's/_dfzf-sort-[0-9]*//; s/'"$windows_title_rm_pattern"'//' |
		perl -pe '
  use Term::ANSIColor;
  BEGIN {
    $color_start = "\033[38;2;76;120;153m";
    $color_end = "\033[0m";
  }

  if ($. == 1) {
    s{(.*)}{
      my $line = $1;

      # ANSI pattern: \033[...m
      my @chunks = split /(\033\[[0-9;]+m.*?\033\[0m)/, $line;

      for (@chunks) {
        next if /\033\[[0-9;]+m.*?\033\[0m/;  # already colored: skip
        $_ = $color_start . $_ . $color_end; # wrap in new color
      }

      join "", @chunks;
    }e;
  }
'

)

if [[ -f $color_state_file ]]; then
	# Extract the color number from the filename
	color="${color_state_file##*-}" # removes everything before last dash
	color_code=$(printf "\033[%sm" "$color")
	rg -F $"$color_code" <<<"$result" || printf '%s\n' "$result"
else
	printf '%s\n' "$result"
fi
