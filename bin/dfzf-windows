#!/usr/bin/env bash
set -euo pipefail

export SHELL="$(command -v bash)"
current_tree=$(dfzf-kill-bro)
export FZF_DEFAULT_OPTS="--ansi --no-sort --exact --cycle --color=gutter:-1 --header= --info=inline-right --margin=1,2"
windows_prompt_pattern="^[>$%] "
[ -f "$HOME/.config/dfzf/dfzf.conf" ] && source "$HOME/.config/dfzf/dfzf.conf"

extract_con_id() {
	sed -Ez 's/.*#([0-9]+).*/\1/'
}
toggle_color() {
	color="$1"
	state_base="/tmp/dfzf-windows-color-"
	state_file="${state_base}${color}"
	if [[ -f $state_file ]]; then
		# File exists â†’ de-toggle: remove the file
		rm -f "$state_file"
	else
		findcommand=$(command -v fd || command -v fdfind) || {
			echo "Neither fd nor fdfind found"
			exit 1
		}
		$findcommand 'dfzf-windows-color-.+' /tmp | xargs rm -f || true
		touch "$state_file"
	fi
	dfzf-windows-load
}
export -f extract_con_id
export -f toggle_color
set_prompt() {
	PROMPT="Windows > "
	for code in 31 32 34; do
		if [[ -f "/tmp/dfzf-windows-color-$code" ]]; then
			case "$code" in
			31) PROMPT=$'\033[31m Windows > \033[0m' ;; # red prompt
			32) PROMPT=$'\033[32m Windows > \033[0m' ;; # green prompt
			34) PROMPT=$'\033[34m Windows > \033[0m' ;; # blue prompt
			esac
			break
		fi
	done
}
set_prompt

if [[ "${KITTY_WINDOW_ID:-}" ]]; then
	findcommand=$(command -v fd || command -v fdfind) || {
		echo "Neither fd nor fdfind found"
		exit 1
	}
	kitty_sock=$($findcommand '^kitty-\d+$' /tmp --max-depth 1 | head -n1)
	PREVIEW="
  kitty_title=\$(echo {}| rg $'\u2063(.*)\u2063' -o --replace '\$1' |sed 's/ /./g')
  prompt_content=\$(kitten @ get-text --to unix:$kitty_sock --match \"title:^\$kitty_title$\" --extent all  2>/dev/null | rg -U '$windows_prompt_pattern(.+)' -o --replace '$> \$1'|tail -n 100)
  if [[ -n \"\$prompt_content\" ]]; then
    printf '%s\n' \"\$prompt_content\" 
  else
    (kitten @ get-text --to unix:$kitty_sock --match \"title:^\$kitty_title$\" --extent screen  2>/dev/null || (echo {} |fold -s -w 90))|rg -v '^\\~\\s*$|^\\s+$'
  fi
    "
	PREVIEW_WINDOW='up:60%,follow'
else
	PREVIEW='echo {}'
	PREVIEW_WINDOW='up:3,wrap'
fi

result=$(dfzf-windows-load "$current_tree")

# Check if result is empty and provide a working fzf with no entries
if [[ -z $result ]]; then
	echo "No windows found" | fzf --sync --prompt "$PROMPT" \
		--preview='echo "No windows available"' \
		--preview-window="up:3,wrap" \
		--bind="enter:abort" \
		--bind="esc:abort"
	exit 0
fi

dfzf-exec '[con_id='"$(head -n1 <<<"$result" | extract_con_id)"']' floating disable

fzf --sync --multi --prompt "$PROMPT" \
	--bind "start:up" --bind "change:first" \
	--preview="$PREVIEW" \
	--preview-window="$PREVIEW_WINDOW" \
	--bind "ctrl-t:execute-silent(echo {+} |rg -o '#\d+\b' | rg -o '\d+' | paste -sd ' ' - | xargs dfzf-windows-till)+abort" \
	--bind="ctrl-r:execute-silent(echo {} |extract_con_id| xargs -I @ dfzf-mark --con-id @ --mark _dfzf-red --append-ts)+reload(dfzf-windows-load)" \
	--bind="ctrl-b:execute-silent(echo {} |extract_con_id| xargs -I @ dfzf-mark --con-id @ --mark _dfzf-blue --append-ts)+reload(dfzf-windows-load)" \
	--bind="ctrl-g:execute-silent(echo {} |extract_con_id| xargs -I @ dfzf-mark --con-id @ --mark _dfzf-green --append-ts)+reload(dfzf-windows-load)" \
	--bind="ctrl-o:execute-silent(echo {} |extract_con_id| xargs -I @ dfzf-mark --con-id @ --mark _dfzf-orange --append-ts)+reload(dfzf-windows-load)" \
	--bind $'B:reload(toggle_color 34)+change-prompt(\033[34m Windows > \033[0m)' \
	--bind $'R:reload(toggle_color 31)+change-prompt(\033[31m Windows > \033[0m)' \
	--bind $'G:reload(toggle_color 32)+change-prompt(\033[32m Windows > \033[0m)' \
	--bind="ctrl-k:execute-silent(echo {} |extract_con_id| xargs -I @ dfzf-windows-kill @)+reload(dfzf-windows-load)" \
	--bind="ctrl-u:execute-silent(echo {} |extract_con_id| xargs -I @ dfzf-exec '[con_id=@] urgent toggle')+reload(dfzf-windows-load)" \
	--bind="ctrl-j:execute-silent(echo {} |extract_con_id| xargs -I @ sh -c \"dfzf-mark --con-id @ --mark _dfzf-preview && dfzf-exec '[con_id=@]' focus && dfzf-mark --con-id @ --mark _dfzf-preview && dfzf-exec '[app_id=\"^dfzf-popup$\"]' focus || dfzf-exec '[class=\"^dfzf-popup$\"]' focus \")" \
	--bind="enter:execute-silent(echo {}  |extract_con_id| xargs -I @ dfzf-exec '[con_id=@]' focus)+accept" \
	--bind="esc:execute-silent(dfzf-windows-load | head -n1 | extract_con_id| xargs -I @ dfzf-exec '[con_id=@]' focus)+abort" <<<"$result"
